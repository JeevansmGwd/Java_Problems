1)

import java.util.ArrayList; 
import java.util.List; 
public class Leaders{ 
public static List findLeaders(int[] arr) 
{ 
List leaders = new ArrayList<>(); 
int n = arr.length; 
int maxRight=arr[n- 1]; 
leaders.add(maxRight); 
for (int i=n- 2;i>=0;i--)
{ 
if (arr[i]>=maxRight)
{ 
leaders.add(arr[i]); maxRight=arr[i]; 
} 
}
return leaders; 
} 
public static void main(String[] args) 
{ 
int[] arr={16,17,4,3,5,2}; 
List leaders=findLeaders(arr); 
System.out.println("Leaders:"+leaders); 
} 
}

2)

import java.util.*; 
public class Permutations
{ 
public static List findUniquePermutations(String str) 
{ 
List result = new ArrayList<>(); 
Char[] chars = str.toCharArray(); 
Arrays.sort(chars); 
generatePermutations(chars, new boolean[chars.length], new StringBuilder(), result); 
Collections.sort(result); 
return result; 
} 
private static void generatePermutations(char[] chars,boolean[] used,StringBuilder current, List result) 
{ 
If (current.length()==chars.length)
{ 
Result.add(current.toString()); 
Return; 
} 
for (int i=0;i0 && chars[i] == chars[I– 1] && !used[I– 1])) 
{ 
Continue; 
} 
Used[i] = true; 
Current.append(chars[i]); 
generatePermutations(chars, used, current, result); current.deleteCharAt(current.length()– 1); 
used[i] = false; 
} 
} 
public static void main(String[] args) 
{ 
String input = “aabb”; 
List permutations = findUniquePermutations(input); 
System.out.println(“Unique permutations of “ + input + “ in lexicographically sorted order:”); 
for (String permutation : permutations) 
{ 
System.out.println(permutation); 
} 
} 
}  

