1.
Public class MissingAndRepeating {
Public static int[] findTwoElement(int arr[], int n) {
Int[] result = new int[2];

// Find the repeating number
For (int I = 0; I < n; i++) {
Int index = Math.abs(arr[i]) – 1;
If (arr[index] < 0) {
Result[0] = Math.abs(arr[i]);
} else {
Arr[index] = -arr[index];
}
}

// Find the missing number
For (int I = 0; I < n; i++) {
If (arr[i] > 0) {
Result[1] = I + 1;
Break;
}
}

Return result;
}

Public static void main(String[] args) {
Int[] arr1 = {2, 2};
Int[] result1 = findTwoElement(arr1, 2);
System.out.println(“Repeating number: “ + result1[0] + “, Missing number: “ +
result1[1]);

Int[] arr2 = {1, 3, 3};
Int[] result2 = findTwoElement(arr2, 3);
System.out.println(“Repeating number: “ + result2[0] + “, Missing number: “ +
result2[1]);
}
}
2.
Public class FirstAndLastOccurrences {
Public static int[] find(int arr[], int n, int x) {
Int firstOccurrence = findFirstOccurrence(arr, n, x);
Int lastOccurrence = findLastOccurrence(arr, n, x);

Return new int[]{firstOccurrence, lastOccurrence};
}

Private static int findFirstOccurrence(int arr[], int n, int x) {
Int low = 0;
Int high = n – 1;
Int firstOccurrence = -1;

While (low <= high) {

Int mid = low + (high – low) / 2;

If (arr[mid] == x) {
firstOccurrence = mid;
high = mid – 1;
} else if (arr[mid] < x) {
Low = mid + 1;
} else {
High = mid – 1;
}
}

Return firstOccurrence;
}

Private static int findLastOccurrence(int arr[], int n, int x) {
Int low = 0;
Int high = n – 1;
Int lastOccurrence = -1;

While (low <= high) {
Int mid = low + (high – low) / 2;

If (arr[mid] == x) {
lastOccurrence = mid;
low = mid + 1;

} else if (arr[mid] < x) {
Low = mid + 1;
} else {
High = mid – 1;
}
}

Return lastOccurrence;
}

Public static void main(String[] args) {
Int[] arr = {1, 3, 5, 5, 5, 5, 67, 123, 125};
Int n = arr.length;
Int x = 5;
Int[] result = find(arr, n, x);
System.out.println(“First Occurrence: “ + result[0]);
System.out.println(“Last Occurrence: “ + result[1]);
}
}
3.
Public class RearrangeArray {
Public static void rearrange(int[] arr, int n) {
Int maxIndex = n – 1;
Int minIndex = 0;
Int maxElement = arr[maxIndex] + 1;

For (int I = 0; I < n; i++) {
// At even index, we store maximum elements
If (I % 2 == 0) {
Arr[i] += (arr[maxIndex] % maxElement) * maxElement;
maxIndex--;
} else { // At odd index, we store minimum elements
Arr[i] += (arr[minIndex] % maxElement) * maxElement;
minIndex++;
}
}

// Retrieve original values
For (int I = 0; I < n; i++) {
Arr[i] = arr[i] / maxElement;
}
}

Public static void main(String[] args) {
Int[] arr1 = {1, 2, 3, 4, 5, 6};
Int n1 = arr1.length;
Rearrange(arr1, n1);
printArray(arr1);

int[] arr2 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110};
int n2 = arr2.length;
rearrange(arr2, n2);

printArray(arr2);
}

// Helper method to print array
Private static void printArray(int[] arr) {
For (int num : arr) {
System.out.print(num + “ “);
}
System.out.println();
}
}
4.
Public class KthElementSortedArrays {
Public static int kthElement(int[] arr1, int[] arr2, int n, int m, int k) {
Int left = Math.max(0, k – m);
Int right = Math.min(n, k);

While (left < right) {
Int mid1 = left + (right – left) / 2;
Int mid2 = k – mid1;

If (arr1[mid1] < arr2[mid2 – 1]) {
Left = mid1 + 1;
} else {
Right = mid1;
}

}

Int idx1 = left – 1;
Int idx2 = k – left;

Int element1 = (idx1 >= 0) ? arr1[idx1] : Integer.MIN_VALUE;
Int element2 = (idx2 >= 0) ? arr2[idx2] : Integer.MIN_VALUE;

Return Math.max(element1, element2);
}

Public static void main(String[] args) {
Int[] arr1 = {2, 3, 6, 7, 9};
Int[] arr2 = {1, 4, 8, 10};
Int n = arr1.length;
Int m = arr2.length;
Int k = 5;
System.out.println(“Kth element: “ + kthElement(arr1, arr2, n, m, k));

Int[] arr3 = {100, 112, 256, 349, 770};
Int[] arr4 = {72, 86, 113, 119, 265, 445, 892};
N = arr3.length;
M = arr4.length;
K = 7;
System.out.println(“Kth element: “ + kthElement(arr3, arr4, n, m, k));
}

}
